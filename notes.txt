$\lambda fxy$. ifzero $x$ $y$ (succ $f$ (pred $x$))

where

$f :== \lambda x$. succ succ $x$

$x :== 5$

$y :== 10$

\section{Introduction}
Intro + Lit survey + mainbody + conclusion <= 10000 words
\section{Literature, technology, and data survey}
\section{...everything else...}
Demonstrate:
- understanding of the problem
- clarity of objectives
- planning and control
- knowledge critial evaluation and use of the literature.
- selection and depliyment of appropraite techniques
- justification of decisions
- achievement of the objectives
- solutions of conceptual problems.
- quality of the product.
- selectivity, clarity and focus in discussion.
- critical evaluation of own work and achievements.

- Clear evidence of originality (novel applications, conception, new methods tools techniques)
- significant contributon to or extension of existing knowledge, methods, or techniques
- or inclusion of a significant amount of material that is publishable.


Including
- software development
    - requirements 
    - design
    - detailed implementation
    - testing

Research:
    - hypothesis 
    - design of experiments
    - experimental results 
    - analysis

Draft one month before handin.
set deadlines
complete section when they are ready.
colalte all material needed before each section

pay special attention to the conclusions. These will be read the most.
Define any accronyms at the start.

\section{Conclusion}
including critical appraisal







bugs include catch being 0 indexed while case and products are 1 indexed. Add Succ.

What chapters will I need?
Well The lite review does a pretty good job at covering background material.

What is the project about?

broadly:
\begin{itemize}
    \item SPCF interpreter
        - haskell 
        - code quality
        - software design?
        - it isn't a regular software project in the sense that it probably doesn't need specific requirements. I think focusing too much on that woudl actually detract from the mathematical nature of it.
        - focus on definitions and interpretations in haskell.
        - Evaluation contexts, typing judements, intermediate data structures (AST), reduction rules, operationally how do we compute in the lambda calculus, can probably talk more about that.
        - testing and evaluation. Unit testing is good and code coverage is good. How do we know it works? Well a lot of it will be up to interpretation but we can take steps to mitigate glaring omissions in the implementations.
    \item I think the language representation is actually big enough to be a section by itself.
        - can talk about delta rules, alpha beta eta equality if I really feel like it, and maybe even some ties to category theory.
    \item denesting terms in SPCF
        - What does the representation look like?
        - How is it defined?
        - How is it fully expressive?
        - What tie ins are there? 
        - Bounded and unbounded terms
        - Slightly different representations
        - Given a working interpreter and language representation, what are we doing here?

        This section could be 2 lines - here is the term that does the magic- but we could go into detail justifying it. Summarising work and showing understanding.
    \item denesting of unbounded terms could probably be its own thing. Whether it's a chapter or section will become obvious later.
\end{itemize}